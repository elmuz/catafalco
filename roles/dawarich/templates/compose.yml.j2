networks:
  dawarich_network:
    name: {{ dawarich_network_name }}
    external: true

services:
  dawarich_redis:
    image: redis:7.0-alpine
    container_name: dawarich_redis
    command: redis-server
    networks:
      - dawarich_network
    volumes:
      - shared_data:/data
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 5m
      retries: 5
      start_period: 30s
      timeout: 10s

  dawarich_db:
    image: postgres:14.2-alpine
    container_name: dawarich_db
    volumes:
      - db_data:/var/lib/postgresql/data
      - shared_data:/var/shared
    networks:
      - dawarich_network
    environment:
      POSTGRES_USER: "{{ dawarich_postgres_username }}"
      POSTGRES_PASSWORD: "{{ dawarich_postgres_password }}"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U {{ dawarich_postgres_username }} -d dawarich_database" ]
      interval: 5m
      retries: 5
      start_period: 30s
      timeout: 10s

  dawarich_app:
    image: freikin/dawarich:latest
    container_name: dawarich_app
    volumes:
      - gem_cache_app:/usr/local/bundle/gems_app
      - public:/var/app/public
      - watched:/var/app/tmp/imports/watched
    networks:
      - dawarich_network
    expose:
      - 3000
    stdin_open: true
    tty: true
    entrypoint: dev-entrypoint.sh
    command: ['bin/dev']
    restart: unless-stopped
    environment:
      RAILS_ENV: development
      REDIS_URL: redis://dawarich_redis:6379/0
      DATABASE_HOST: dawarich_db
      DATABASE_USERNAME: "{{ dawarich_postgres_username }}"
      DATABASE_PASSWORD: "{{ dawarich_postgres_password }}"
      DATABASE_NAME: dawarich_database
      MIN_MINUTES_SPENT_IN_CITY: 60
      APPLICATION_HOST: "{{ dawarich_subdomain }}.{{ site_url }}"
      APPLICATION_HOSTS: "{{ dawarich_subdomain }}.{{ site_url }},127.0.0.1"
      TIME_ZONE: "{{ timezone }}"
      APPLICATION_PROTOCOL: http
      DISTANCE_UNIT: km
      REVERSE_GEOCODING_ENABLED: true
      PHOTON_API_HOST: photon.komoot.io
      PHOTON_API_USE_HTTPS: true
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    healthcheck:
      test: [ "CMD-SHELL", "wget -qO - http://127.0.0.1:3000/api/v1/health | grep -q '\"status\"\\s*:\\s*\"ok\"'" ]
      interval: 5m
      retries: 5
      start_period: 30s
      timeout: 10s
    depends_on:
      dawarich_db:
        condition: service_healthy
        restart: true
      dawarich_redis:
        condition: service_healthy
        restart: true
    labels:
      swag.uptime-kuma.enabled: "true"
      swag.uptime-kuma.monitor.name: "{{ dawarich_dashboard_name }}"
      swag.uptime-kuma.monitor.url: "{{ dawarich_dashboard_url }}"

  dawarich_sidekiq:
    image: freikin/dawarich:latest
    container_name: dawarich_sidekiq
    volumes:
      - gem_cache_sidekiq:/usr/local/bundle/gems_sidekiq
      - public:/var/app/public
      - watched:/var/app/tmp/imports/watched
    networks:
      - dawarich_network
    stdin_open: true
    tty: true
    entrypoint: dev-entrypoint.sh
    command: ['sidekiq']
    restart: unless-stopped
    environment:
      RAILS_ENV: development
      REDIS_URL: redis://dawarich_redis:6379/0
      DATABASE_HOST: dawarich_db
      DATABASE_USERNAME: "{{ dawarich_postgres_username }}"
      DATABASE_PASSWORD: "{{ dawarich_postgres_password }}"
      DATABASE_NAME: dawarich_database
      APPLICATION_HOST: "{{ dawarich_subdomain }}.{{ site_url }}"
      APPLICATION_HOSTS: "{{ dawarich_subdomain }}.{{ site_url }},127.0.0.1"
      BACKGROUND_PROCESSING_CONCURRENCY: 10
      APPLICATION_PROTOCOL: http
      DISTANCE_UNIT: km
      REVERSE_GEOCODING_ENABLED: false
      PHOTON_API_HOST: photon.komoot.io
      PHOTON_API_USE_HTTPS: true
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    healthcheck:
      test: [ "CMD-SHELL", "bundle exec sidekiqmon processes | grep $${HOSTNAME}" ]
      interval: 5m
      retries: 5
      start_period: 30s
      timeout: 10s
    depends_on:
      dawarich_db:
        condition: service_healthy
        restart: true
      dawarich_redis:
        condition: service_healthy
        restart: true
      dawarich_app:
        condition: service_healthy
        restart: true

volumes:
{% for item in ['db_data', 'gem_cache_app', 'gem_cache_sidekiq', 'shared_data', 'public', 'watched'] %}
  {{ item }}:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: "{{ docker_dir }}/{{ dawarich_container_name }}/{{ item }}"
{% endfor %}