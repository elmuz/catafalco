---
- name: Include OS-specific variables
  include_vars: "{{ ansible_facts['os_family'] }}.yml"

- name: Install required system packages
  package:
    state: present
    name: "{{ docker_deps }}"

- name: Install Docker (Ubuntu)
  when: ansible_facts['distribution'] == 'Ubuntu'
  block:
    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu bionic stable
        state: present

- name: Install Docker (Debian)
  when: ansible_facts['distribution'] == 'Debian'
  block:
    # NOTE: this is deprecated, use /etc/apt/trusted.gpg.d instead (see official doc)
    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/debian/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/debian bookworm stable
        state: present

    - name: Switch to iptables-legacy
      community.general.alternatives:
        name: iptables
        path: /usr/sbin/iptables-legacy

    - name: Switch to ip6tables-legacy
      community.general.alternatives:
        name: ip6tables
        path: /usr/sbin/ip6tables-legacy

    - name: Switch to pip3
      community.general.alternatives:
        name: pip
        link: /usr/bin/pip
        path: /usr/bin/pip3

    - name: Switch to python3
      community.general.alternatives:
        name: python
        link: /usr/bin/python
        path: /usr/bin/python3

- name: Update apt and install docker-ce
  when: ansible_facts['os_family'] == 'Debian'
  apt:
    update_cache: true
    name: "{{ docker_packages }}"
    state: present

- name: Ensure group docker exists
  group:
    name: docker
    state: present

- name: Add user to group docker
  user:
    name: "{{ username }}"
    groups:
      - docker
    append: true

- name: Update default network pools
  ansible.builtin.copy:
    src: daemon.json
    dest: /etc/docker/daemon.json
    owner: root
    group: root
    mode: "0644"

- name: Make sure Docker is running and enabled
  ansible.builtin.service:
    name: docker
    state: restarted
    enabled: true

- name: Handle persistent data
  become: false
  when: enable_containers | default(False)
  block:
    - name: Check if the persistent data folder exists on the remote machine
      stat:
        path: "{{ docker_dir }}"
      register: persistent_data
      when: enable_containers | default(False)

    - name: Check if the persistent data folder is empty
      find:
        paths:
          - "{{ docker_dir }}/"
        recurse: true
      register: persistent_data_find
      when: enable_containers | default(False)

#    - name: Check if the docker backup exists
#      stat:
#        path: "{{ mergerfs_root }}/docker-volumes-backup"
#      register: docker_backup_find
#      when: enable_containers | default(False)

    - name: Create the persistent data folder on the remote machine
      become: true
      file:
        dest: "{{ docker_dir }}"
        state: directory
        owner: "{{ guid }}"
        group: "{{ guid }}"
        mode: "0755"
        recurse: true
      when: not persistent_data.stat.exists

    #  - name: Restore the "{{ docker_dir }}" folder from the MergerFS array
    #    synchronize:
    #      src: "{{ mergerfs_root }}/docker-volumes-backup"
    #      dest: "{{ docker_dir }}/"
    #      delete: true
    #      recursive: yes
    #    delegate_to: "{{ inventory_hostname }}"
    #    when: docker_backup_find.stat.exists and persistent_data_find.matched < 20 or not persistent_data.stat.exists

    - name: Chmod the data folder
      become: true
      file:
        dest: "{{ docker_dir }}"
        state: directory
        owner: "{{ guid }}"
        group: "{{ guid }}"
        recurse: true
